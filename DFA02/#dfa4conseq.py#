#!/usr/bin/env python3
#Joseph Reis
#CS3100, HW #3
from MkDFA import *

#def dfa4conseq():


def step_dfa(D,q,c):
	"""Run DFA D from state q on character c. Return the next state."""
	assert(c in D["Sigma"])
	assert(q in D["Q"])
	return D["Delta"][(q,c)]

def run_dfa(D,q,s):
	"""Run DFA D from state q on string S. Return the next state."""
	return q if s=="" else run_dfa(D,step_dfa(D,q,s[0]),s[1:])

def accepts(D,q,s):
	"""Checks for DFA acceptance"""
	return run_dfa(D,q,s) in D["F"]
	
def run_dfa():
	Q = {'','0','1','00','01','10','11','000','001','010','011','100','101','110','111','0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111'}
	Sigma = {'0','1'}
Delta = {('', '0'):'0',('','1'):'1',('0','0'):'00',('0','1'):'01',('1','0'):'10',('1','1'):'11',('00','0'):'000',('00','1'):'001',('01','0'):'010',('01','1'):'011',('10','0'):'100',('10','1'):'101',('11','0'):'110',('11','1'):'111',('000','0'):'0000',('000','1'):'0001', ('001','0'):'0010',('001','1'):'0011',('010','0'):'0100',('010','1'):'0101',('011','0'):'0110',('011', '1'):'0111',('100','0'):'1000',('100','1'):'1001',('101','0'):'1010', ('101','1'):'1011', ('110','0'):'1100',('110','1'):'1101',('111','0'):'1110',('111','1'):'1111',('0000','0'):'0000',('0000','1'):'0001',('0001','0'):'0010',('0001','1'):'0011',('0010','0'):'0100',('0010','1'):'0101',('0011','0'):'0110',('0011','1'):'0111',('0100','0'):'1000',('0100','1'):'1001',('0101','0'):'1010',('0101','1'):'1011',('0110','0'):'1100',('0110','1'):'1101',('0111','0'):'0111',('0111','1'):'0111',('1000','0'):'0000',('1000','1'):'0001',('1001','0'):'0010',('1001','1'):'0011',('1010','0'):'0100',('1010','1'):'0101',('1011','0'):'1011',('1011','1'):'1011',('1100','0'):'1000',('1100','1'):'1001',('1101':'0'):'1101',('1101:1'):'1101',('1110','0'):'1100',('1110','1'):'1100',('1111','0'):'1111',('1111','1'):'1111'}
	#Delta = {('S0', '0'): 'S1', ('S0', '1'): 'S0', ('S1', '0'): 'S1', ('S1', '1'): 'S2', ('S2','0'): 'S3', ('S2','1'): 'S0', ('S3','0'):'S1', ('S3','1'):'S4', ('S4','0'):'S1',('S4','1'):'S0'}
	q0 = ''
	F = {'0000','0001','0010','0011','0100','0101','0110','1000','1001','1010','1100'}
	#N = 5
	#print(mk_dfa(Q, Sigma, q0, F, Delta))
	#accepts({"Q":Q, "Sigma":Sigma, "Delta":Delta, "q0":q0, "F":F}, 'recognizes.dot')
	print(accepts(mk_dfa(Q, Sigma, q0, F, Delta),Q,Sigma))
	#assert(len(Q) == 31)
	#assert(len(Delta) == len(Q)*2)
if __name__ == "__main__":
	run_dfa()