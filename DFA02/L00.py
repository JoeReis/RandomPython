#!/usr/bin/env python3
#Joseph Reis
#CS3100, HW #3
from MkDFA import *
from DotDFA import *
from recognizes import *
	
def run_dfa():
	Q = {'e','0','1','00','01','10','11','000','001','010','011','100','101','110','111',
	'0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111'}
	Sigma = {'0','1'}
	Delta = {('e', '0'):'0',('e','1'):'1',('0','0'):'00',('0','1'):'01',
	('1','0'):'10',('1','1'):'11',('00','0'):'000',('00','1'):'001',
	('01','0'):'010',('01','1'):'011',('10','0'):'100',('10','1'):'101',
	('11','0'):'110',('11','1'):'111',('000','0'):'0000',('000','1'):'0001', 
	('001','0'):'0010',('001','1'):'0011',('010','0'):'0100',('010','1'):'0101',
	('011','0'):'0110',('011', '1'):'0111',('100','0'):'1000',('100','1'):'1001',
	('101','0'):'1010', ('101','1'):'1011', ('110','0'):'1100',('110','1'):'1101',
	('111','0'):'1110',('111','1'):'1111',('0000','0'):'0000',('0000','1'):'0001',
	('0001','0'):'0010',('0001','1'):'0011',('0010','0'):'0100',('0010','1'):'0101',
	('0011','0'):'0110',('0011','1'):'0111',('0100','0'):'1000',('0100','1'):'1001',
	('0101','0'):'1010',('0101','1'):'1011',('0110','0'):'1100',('0110','1'):'1101',
	('0111','0'):'0111',('0111','1'):'0111',('1000','0'):'0000',('1000','1'):'0001',
	('1001','0'):'0010',('1001','1'):'0011',('1010','0'):'0100',('1010','1'):'0101',
	('1011','0'):'1011',('1011','1'):'1011',('1100','0'):'1000',('1100','1'):'1001',
	('1101','0'):'1101',('1101','1'):'1101',('1110','0'):'1100',('1110','1'):'1100',('1111','0'):'1111',('1111','1'):'1111'}
	#Delta = {('S0', '0'): 'S1', ('S0', '1'): 'S0', ('S1', '0'): 'S1', ('S1', '1'): 'S2', ('S2','0'): 'S3', ('S2','1'): 'S0', ('S3','0'):'S1', ('S3','1'):'S4', ('S4','0'):'S1',('S4','1'):'S0'}
	q0 = 'e'
	F = {'00','010','100','000','001','0000','0001','0010','0011','0100','0101','0110','1000','1001','1010','1100'}
	
	#test on strings
	
	#2 strings of length less than 5
	print("001", accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"001")) #accept
	print("00", accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"00")) #accept
	
	#Five (5) strings that are accepted and of length greater than or equal to 6
	print("0101000",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"0101000")) #accept
	print("0100010",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"0100010")) #accept
	print("0101010",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"0101010")) #accept
	print("0101001",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"0101001")) #accept
	print("010100",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"010100")) #accept
	
	#Five strings that are rejected and of length greater than or equal to 6
	print("011111",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"011111")) #reject
	print("0111111",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"0111111")) #reject
	print("111101",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"111101")) #reject
	print("1011111",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"1011111")) #reject
	print("101111",accepts(mk_dfa(Q, Sigma, q0, F, Delta),q0,"101111")) #reject
	
	dot_dfa(mk_dfa(Q, Sigma, q0, F, Delta),'L00.dot')

if __name__ == "__main__":
	run_dfa()
